library(RNifti)
library(neurobase)
library(oro.nifti)
library(brainGraph)


#please load aal116.rds, number.rds, AAL.rds

# set to your own working directory of all nii data
setwd("C:/Users/Karen Chen/Desktop/alff")

#saveRDS(number, "number.rds")
#saveRDS(AAL, "AAL.rds")

AAL116mask = list()
AAL116masksize = list()
# create a list of 3d masks (total 116)
# number is the numbering for aal116 atlas
# AAL is the numeric mask cooresponding to number
for (t in 1:116){
  temp <- array(0, c(61, 73, 61))
  a = 0
  for (i in 1:61){
    for (j in 1:73){
      for (k in 1:61){
        if (AAL[i,j,k] == number[t]){
          temp[i,j,k] <- 1
          a = a + 1
        }
      }
    }
  }
  AAL116mask[[t]] = temp
  AAL116masksize[[t]] = a
}



# apply atlas to obtain average value

#setwd("C:/Users/Karen Chen/Desktop/alff")
#get all gz files (nii data)

files <- list.files(pattern = "\\.gz$")

niidatalist = matrix(0,116, 1099)

for (a in 1:1099){
  testgroup = readnii(files[a])
  data = slot(testgroup, ".Data")
  for (t in 1:116){
    niidatalist[t,a] = sum(AAL116mask[[t]] * data) / AAL116masksize[[t]]
  }
  
}

# niidatalist is the final preprocessed data list



## utilities to plot
.make.adj.matrix <-
  function(theta, separate=FALSE)
  {
    K = length(theta)
    adj = list()
    if(separate)
    {
      for(k in 1:K)
      {
        adj[[k]] = (abs(theta[[k]])>1e-5)*1
      }
    }
    if(!separate)
    {
      adj = 0*theta[[1]]
      for(k in 1:K)
      {
        adj = adj+(abs(theta[[k]])>1e-5)*2^(k-1)
      }
    }
    return(adj)
  }

# modified from plot.simule
plotutil <-
  function(x, name, type="graph", subID=NULL, index=NULL,  ...)
  {
    .env = "environment: namespace:simule"
    #UseMethod("plot")
    tmp = x$Graphs
    Graphs = list()
    p = dim(tmp[[1]])[1]
    if (type == "share"){
      Graphs[[1]] = x$share
    }
    if (type == "sub"){
      Graphs[[1]] = tmp[[subID]] - x$share
    }
    if (type == "graph"){
      Graphs = tmp
    }
    if (type == "neighbor"){
      id = matrix(0,p,p)
      id[index,] = rep(1,p)
      id[,index] = rep(1,p)
      for (i in 1:length(tmp)){
        Graphs[[i]] = tmp[[i]] * id
      }
    }
    K=length(Graphs)
    adj = .make.adj.matrix(Graphs)
    diag(adj)=0
    
    # add names to graph vertexes
    colnames(adj) <- name
    rownames(adj) <- name
    gadj = graph.adjacency(adj,mode="upper",weighted=TRUE, add.colnames = 'name', add.rownames = 'name')
    
    return (gadj)
    
    
    
  }


# concatnate 1099 patients into two groups (could group better if I know the grouping for them)
a <- t(niidatalist[1:116,1:500])  
b <- t(niidatalist[1:116,501:1099]) 

finaldatalist <- list(a,b)
#saveRDS(finaldatalist, "finaldatalist.rds")

#finaldatalist is the direct input to simule
