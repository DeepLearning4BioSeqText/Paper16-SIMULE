

g = g_s0.01_ss0.1
shareadj = make.adj.matrix(list(g[[3]]))
diag(shareadj)=0
sharegraph = graph_from_adjacency_matrix(shareadj,mode="upper",weighted=TRUE)



  sub1adj = make.adj.matrix(list(g[[1]]))
  diag(sub1adj)=0
  sub1adj = graph_from_adjacency_matrix(sub1adj,mode="upper",weighted=TRUE)
  sub1adj = difference(sub1adj, sharegraph)

  sub2adj = make.adj.matrix(list(g[[2]]))
  diag(sub2adj)=0
  sub2adj = graph_from_adjacency_matrix(sub2adj,mode="upper",weighted=TRUE)
  sub2adj = difference(sub2adj, sharegraph)

  {
  graphlayout = layout_nicely(sharegraph,dim=2)

  plot.igraph(sharegraph,layout = graphlayout, main = "shared")

  plot.igraph(sub1adj,layout = graphlayout, main = "1")

  plot.igraph(sub2adj,layout = graphlayout, main = "2")
  }

  exampleDataGraph = list(sharegraph,sub1adjï¼Œsub2adj)
  save(exampleDataGraph, file = "exampleDataGraph.rda")
  #E(gadj)$color = get.edge.attribute(gadj,"weight")

  #plot.igraph(gadj,layout = graphlayout, main = paste("sub - share",i))


  make.adj.matrix <-
    function(theta, separate=FALSE)
    {
      K = length(theta)
      adj = list()

      if(separate)
      {
        for(k in 1:K)
        {
          adj[[k]] = (abs(theta[[k]])>1e-5)*1
        }
      }

      if(!separate)
      {
        adj = 0*theta[[1]]
        for(k in 1:K)
        {
          adj = adj+(abs(theta[[k]])>1e-5)*2^(k-1)
        }
      }

      return(adj)
    }
