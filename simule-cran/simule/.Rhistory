subID = NULL, index = NULL, layout = layout, color = color, label = label)
bgplot3d({
plot.new()
title(main = 'Shared', line = 3)
# use here any other way you fancy to write your title
})
### control, early, advanced
simule::plotbrain.simule(result, type = "taskspecific", neighbouroption = "task",
subID = 1, index = NULL, layout = layout, color = color, label = label)
result = simule(JamieData, 0.2, 1, covType = "kendall", TRUE)
{
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
bgplot3d({
plot.new()
title(main = 'Shared', line = 3)
# use here any other way you fancy to write your title
})
}
### control, early, advanced
{
simule::plotbrain.simule(result, type = "taskspecific", neighbouroption = "task",
subID = 1, index = NULL, layout = layout, color = color, label = label)
bgplot3d({
plot.new()
title(main = 'Control Specific', line = 3)
# use here any other way you fancy to write your title
})
}
{
simule::plotbrain.simule(result, type = "taskspecific", neighbouroption = "task",
subID = 2, index = NULL, layout = layout, color = color, label = label)
bgplot3d({
plot.new()
title(main = 'Early Specific', line = 3)
# use here any other way you fancy to write your title
})
}
{
simule::plotbrain.simule(result, type = "taskspecific", neighbouroption = "task",
subID = 3, index = NULL, layout = layout, color = color, label = label)
bgplot3d({
plot.new()
title(main = 'Advanced Specific', line = 3)
# use here any other way you fancy to write your title
})
}
result = simule(JamieData, 0.25, 1, covType = "kendall", TRUE)
{
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
bgplot3d({
plot.new()
title(main = 'Shared', line = 3)
# use here any other way you fancy to write your title
})
}
### control
{
simule::plotbrain.simule(result, type = "taskspecific", neighbouroption = "task",
subID = 1, index = NULL, layout = layout, color = color, label = label)
bgplot3d({
plot.new()
title(main = 'Control Specific', line = 3)
# use here any other way you fancy to write your title
})
}
graph = returngraph.simule(result)
E(graph)
temp = E(graph)
temp
temp[1]
temp[2]
temp[1][1]
graph <- set.vertex.attribute(graph, "name", label)
graph = returngraph.simule(result)
V(graph)
V(graph)$name
V(graph) = label
V(graph)$name = label
V(graph)$name
E(graph)
palette(rainbow(3))
palette()
palette(rainbow(4))
palette()
sharegraph = returngraph.simule(result, type = "share")
V(sharegraph)$name = label
E(sharegraph)
controlgraph = returngraph.simule(result, type = "taskspecific", subID = 1)
V(controlgraph)$name = label
V(controlgraph)$name
E(controlgraph)
earlygraph = returngraph.simule(result, type = "taskspecific", subID = 2)
V(earlygraph)$name = label
E(earlygraph)
result = simule(JamieData, 0.28, 1, covType = "kendall", TRUE)
sharegraph = returngraph.simule(result, type = "share")
V(sharegraph)$name = label
E(sharegraph)
controlgraph = returngraph.simule(result, type = "taskspecific", subID = 1)
V(controlgraph)$name = label
E(controlgraph)
earlygraph = returngraph.simule(result, type = "taskspecific", subID = 2)
V(earlygraph)$name = label
E(earlygraph)
advancegraph = returngraph.simule(result, type = "taskspecific", subID = 3)
V(advancegraph)$name = label
E(advancegraph)
{
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
bgplot3d({
plot.new()
title(main = 'Shared', line = 3)
# use here any other way you fancy to write your title
})
}
palette()
### advanced
{
simule::plotbrain.simule(result, type = "taskspecific", neighbouroption = "task",
subID = 3, index = NULL, layout = layout, color = color, label = label)
bgplot3d({
plot.new()
title(main = 'Advanced Specific', line = 3)
# use here any other way you fancy to write your title
})
}
### advanced
{
simule::plotbrain.simule(result, type = "taskspecific", neighbouroption = "task",
subID = 3, index = NULL, layout = layout, color = color, label = label)
legend3d("topright", legend = paste('Stage', c('3', '4', '5', '6')), pch = 16, col = rainbow(4), cex=1, inset=c(0.02))
}
legend3d("topright", legend = paste('Stage', c('3', '4', '5', '6')), pch = 16, col = rainbow(4), cex=0.5, inset=c(0.02))
legend3d("topright", legend = paste('Stage', c('3', '4', '5', '6')), pch = 16, col = rainbow(4), cex=0.8, inset=c(0.02))
par3d("windowRect")
> par3d(windowRect = c(20, 30, 800, 800))
par3d(windowRect = c(20, 30, 800, 800))
### share
{
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
bgplot3d({
plot.new()
title(main = 'Shared', line = 3)
# use here any other way you fancy to write your title
})
}
### share
{
par3d(windowRect = c(20, 30, 800, 800))
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
bgplot3d({
plot.new()
title(main = 'Shared', line = 3)
# use here any other way you fancy to write your title
})
}
### share
{
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
legend3d("topright", legend = paste('Stage', c('share','3', '4', '5', '6')), pch = 16, col = c(NULL,rainbow(4)), cex=0.8, inset=c(0.02))
}
### share
{
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
legend3d("topright", legend = paste('Stage', c('share','3', '4', '5', '6')), pch = 16, col = c(NULL,rainbow(4)), cex=0.8, inset=c(0.02))
legend3d("topleft", legend = 'share')
}
legend3d("topright", legend = paste('Stage', c('share','3', '4', '5', '6')), pch = 16, col = c(NA,rainbow(4)), cex=0.8, inset=c(0.02))
paste('Stage', c('3', '4', '5', '6'))
c('Shared',paste('Stage', c('3', '4', '5', '6')))
### share
{
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
legend3d("topright", legend = c('shared',paste('Stage', c('3', '4', '5', '6'))), pch = 16, col = c(NA,rainbow(4)), cex=0.8, inset=c(0.02))
}
### share
{
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
legend3d("topright", legend = c('Shared',paste('Stage', c('3', '4', '5', '6'))), pch = 16, col = c(NA,rainbow(4)), cex=0.8, inset=c(0.02))
}
rainbow(10)
rainbow(20)
legend3d("topright", legend = c('Shared',paste('Stage', c('3', '4', '5', '6'))), pch = 16, col = c(NA,rainbow(20)), cex=0.8, inset=c(0.02))
levels(rainbow(3))
(rainbow(3))
library(simule)
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
library(simule)
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
bgplot3d({
title(main = 'title', line = 3)
legend(
"topright" ,
legend = c(paste("task", c(
1:length(simuleresult$Graphs)
), "specific"), "share"),
col = rainbow(length(simuleresult$Graphs) + 1),
pch = 16,cex=1, inset=c(0.02)
)
})
bgplot3d({
title(main = 'title', line = 3)
})
bgplot3d({
plot.new()
title(main = 'title', line = 3)
legend(
"topright" ,
legend = c(paste("task", c(
1:length(simuleresult$Graphs)
), "specific"), "share"),
col = rainbow(length(simuleresult$Graphs) + 1),
pch = 16,cex=1, inset=c(0.02)
)
})
bgplot3d({
plot.new()
title(main = 'title', line = 3)
legend(
"topright" ,
legend = 'hello',
col = rainbow(1),
pch = 16,cex=1, inset=c(0.02)
)
})
library(simule)
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
library(simule)
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
rainbow(4)
categorical_pal(4)
bgplot3d({
plot.new()
title(main = 'title', line = 3)
legend(
"topright" ,
col = rainbow(4),
pch = 16,cex=1, inset=c(0.02)
)
})
bgplot3d({
plot.new()
title(main = 'title', line = 3)
legend(
"topright" ,
legend = c('1'),
col = rainbow(4),
pch = 16,cex=1, inset=c(0.02)
)
})
bgplot3d({
plot.new()
title(main = 'title', line = 3)
legend(
"topright" ,
legend = c(1:4),
col = rainbow(4),
pch = 16,cex=1, inset=c(0.02)
)
})
bgplot3d({
plot.new()
title(main = 'title', line = 3)
legend(
"topright" ,
legend = c(1:4),
col = rainbow(4),
pch = 16,cex=1, inset=c(0.02)
)
legend(
"topleft" ,
legend = c(1:4),
col = categorical_pal(4),
pch = 16,cex=1, inset=c(0.02)
)
})
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
simule::plotbrain.simule(result, type = "taskspecific", neighbouroption = "task",
subID = 1, index = NULL, layout = layout, color = color, label = label)
palette()
palette(rainbow(4))
palette()
library(simule)
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
palette()
color
simule::plotbrain.simule(result, layout = layout, color = color, label = label)
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
pa
palette()
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
simule::plotbrain.simule(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
library(simule)
graphics.off()
par(ask=F)
par(mfrow=c(1,1))
data(ABIDE_aal116_timeseries)
label = colnames(ABIDE_aal116_timeseries[[1]])
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
result = simule(ABIDE_aal116_timeseries, 0.2, 1, covType = "cov", TRUE)
color = as.integer(aal116coordinates$lobe)
simule::plotbrain.simule(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
simule::plotbrain.simule(result, type = "taskspecifc", neighbouroption = "task",
subID = 1, index = NULL, layout = layout, color = color, label = label)
simule::plotbrain.simule(result, type = "taskspecific", neighbouroption = "task",
subID = 1, index = NULL, layout = layout, color = color, label = label)
library(simule)
simule::plotbrain.simule(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
palette()
simule::plotbrain.simule(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
library(simule)
simule::plotbrain.simule(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
list[[1]]
JamieData[[1]]
JamieData[[1]]$name
JamieData[[1]]
names(JamieData) = (c('control','early','advanced')
)
JamieData[[1]]$names
JamieData[[1]]
JamieData['control']
JamieData[1]
JamieData[1]$control
rainbow(4)[c[1,1,1,1,1]]
simule::plotbrain.simule(result, type = "share", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout, color = color, label = label)
aal116coordinates$lobe
E(graph)
V(graph)
demo(simule)
library(simule)
library(simule)
roxygen2::roxygenise()
library(roxygen2)
install.packages('roxygen2')
roxygen2::roxygenise()
rainbow(4)
rainbow(4)[c(1,1,1)]
rainbow(4)[c(1,1,1,3,3,3)]
library(simule)
demo(simule)
library(simule)
library(simule)
demo(simule)
library(simule)
demo(cancer)
library(simule)
demo(synthetic)
library(simule)
demo(word)
library(simule)
demo(wsimule)
library(simule)
document()
library("roxygen2")
document()
library('devtools')
document()
document()
document()
library('simule')
data(cancer)
?data(cancer)
?cancer
cancer$status
document()
document()
library(simule)
document()
document()
library(simule)
### load the nips word count data
data(nip_37_data)
label = colnames(nip_37_data[[1]])
result = wsimule(nip_37_data, lambda = 0.13, epsilon = 0.5, W = matrix(1,37,37) , covType = "kendall", parallel = TRUE)
# return igraph object
pdf(file = NULL)
graph = plot.simule(result)
document()
library(simule)
### load the nips word count data
data(nip_37_data)
label = colnames(nip_37_data[[1]])
result = wsimule(nip_37_data, lambda = 0.13, epsilon = 0.5, W = matrix(1,37,37) , covType = "kendall", parallel = TRUE)
# return igraph object
pdf(file = NULL)
graph = plot.simule(result)
dev.off()
# fix plot layout
layout = layout_nicely(graph, dim = 2)
par(mfrow=c(2,2))
{
plot.simule(result, graphlabel = label, type="task", graphlayout = layout)
plot.simule(result, graphlabel = label, type="share", graphlayout = layout)
plot.simule(result, graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.simule(result, graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
plot.simule(result, graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
plot.simule(result, graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.simule(result, graphlabel = label, type="share", graphlayout = layout)
plot.simule(result, graphlabel = label, type="task", graphlayout = layout)
library(simule)
demo(wsimule)
plot.simule(result, graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
{
layout = layout_nicely(plot.simule(result, graphlabel = label, type="task", graphlayout = NULL))
plot.simule(result, graphlabel = label, type="share", graphlayout = layout)
plot.simule(result, graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.simule(result, graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### plotting window reset routine
graphics.off()
par(mfrow=c(2,2))
{
layout = layout_nicely(plot.simule(result, graphlabel = label, type="task", graphlayout = NULL))
plot.simule(result, graphlabel = label, type="share", graphlayout = layout)
plot.simule(result, graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.simule(result, graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
graph = plot.simule(result)
pdf(file = NULL)
par(ask=F)
graph = plot.simule(result)
dev.off()
library(simule)
demo(wsimule)
library(simule)
demo(wsimule)
library(simule)
demo(wsimule)
demo(simule)
library(simule)
demo(simule)
library(simule)
demo(simule)
?deprecated
library(simule)
demo(cancer)
demo(synthetic)
demo(word)
document()
document()
document()
document()
document()
document()
document()
document()
document()
data('nip_37_data')
compress_save(file = nip_37_data, name = 'nip_37_data.rda')
### compress rda file for passing check
compress_save <- function(file = NULL, name = NULL){
save(file, file=name, compress='xz')
}
compress_save(file = nip_37_data, name = 'nip_37_data.rda')
document
document()
library(simule)
data("nip_37_data")
plot(1)
plot(1,draw=FALSE)
plot.igraph(1,draw=FALSE)
document()
pdf(file = NULL)
library(simule)
document()
warnings()
warnings()
document()
library(simule)
pdf(file= "hello")
warning()
warnings()
pdf(file= "hello")
dev.off()
library(devtools)
library(roxygen2)
document()
check()
document()
check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
