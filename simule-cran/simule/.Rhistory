install.packages("gWidgetsRGtk2")
win <- gwindow("Tab file upload example")
library(gWidgets)
library(gWidgetsRGtk2)
win <- gwindow("Tab file upload example")
grp_name <- ggroup(container = win)
lbl_data_frame_name <- glabel(
"Variable to save data to: ",
container = win
)
install.packages('cairoDevice ')
install.packages('cairoDevice')
install.packages("cairoDevice")
install.packages("cairoDevice")
install.packages("cairoDevice")
install.packages("cairoDevice")
install.packages("cairoDevice")
lbl_data_frame_name <- glabel(
"Variable to save data to: ",
container = win
)
library(gWidgets)
library(gWidgetsRGtk2)
win <- gwindow("Tab file upload example")
a
lbl_data_frame_name <- glabel(
"Variable to save data to: ",
container = win
)
g <- ggroup(cont=win)
library(RGtk2)
createWindow <- function()
{
window <- gtkWindow()
label <- gtkLabel("Hello World")
window$add(label)
}
createWindow()
gtk.main()
createWindow()
plot_brainGraph_gui <- function() {
window <- gtkWindow('toplevel')
window['title'] <- 'brainGraph'
window['icon'] <- gdkPixbuf(filename=system.file('extdata',
'brainGraph_icon.png',
package='brainGraph'))
gui.params <- hboxMain <- plotFunc <- neighbs <- view <- comms <- myComm <-
myNeighb <- myNeighbInd <- graphObj <- slider <- graph1 <- kNumGroups <-
vsize.opts <- vsize.measure <- ewidth.opts <- ewidth.measure <- showDiameter <-
edgeDiffs <- myLobe <- lobe <- Lobe <- NULL
}
plot_brainGraph_gui
plot_brainGraph_gui
(plot_brainGraph_gui)
plot_brainGraph_gui <- function() {
window <- gtkWindow('toplevel')
window['title'] <- 'brainGraph'
window['icon'] <- gdkPixbuf(filename=system.file('extdata',
'brainGraph_icon.png',
package='brainGraph'))
gui.params <- hboxMain <- plotFunc <- neighbs <- view <- comms <- myComm <-
myNeighb <- myNeighbInd <- graphObj <- slider <- graph1 <- kNumGroups <-
vsize.opts <- vsize.measure <- ewidth.opts <- ewidth.measure <- showDiameter <-
edgeDiffs <- myLobe <- lobe <- Lobe <- NULL
}
plot_brainGraph_gui
library(RGtk2)
plot_brainGraph_gui <- function() {
window <- gtkWindow('toplevel')
window['title'] <- 'brainGraph'
window['icon'] <- gdkPixbuf(filename=system.file('extdata',
'brainGraph_icon.png',
package='brainGraph'))
gui.params <- hboxMain <- plotFunc <- neighbs <- view <- comms <- myComm <-
myNeighb <- myNeighbInd <- graphObj <- slider <- graph1 <- kNumGroups <-
vsize.opts <- vsize.measure <- ewidth.opts <- ewidth.measure <- showDiameter <-
edgeDiffs <- myLobe <- lobe <- Lobe <- NULL
}
plot_brainGraph_gui
install.packages('gWidgets2')
library("cairoDevice", lib.loc="~/R/win-library/3.4")
remove.packages("cairoDevice", lib="~/R/win-library/3.4")
install.packages("cairoDevice")
install.packages("cairoDevice")
library("cairoDevice", lib.loc="~/R/win-library/3.4")
remove.packages("cairoDevice", lib="~/R/win-library/3.4")
install.packages(c("gWidgets2RGtk2", "cairoDevice"))
install.packages(c("gWidgets2RGtk2", "cairoDevice"))
library(gWidgets2RGtk2)
library(gWidgets2)
## Select the RGtk2 toolkit
options(guiToolkit="RGtk2")
## Create a window called "Hello World"
win <- gwindow("Hello World")
## Create a "Hello world" button and make it do something using a
## handler
obj <- gbutton("Hello world", container=win,
handler=function(h, ...) {
gmessage("Hello world")
})
{
library(gWidgets2)
options(guiToolkit="RGtk2")
win <- gwindow("Hello World, Goodbye world")
## Create a ggroup to  put more than one Widget in
group <- ggroup(horizontal=FALSE, container=win)
## Create a "Hello world" button within the group we've just made
hello <- gbutton("Hello world", container=group,
handler=function(h, ...) {
gmessage("Hello world")
})
## Add another button
goodbye <- gbutton("Goodbye world", container=group,
handler=function(h, ...) {
gmessage("Goodbye world")
})
}
{
library(gWidgets2)
options(guiToolkit="RGtk2")
win <- gwindow("Hello World times n")
group <- ggroup(horizontal=FALSE, container=win)
## Add a spinner in a group
g.times <- ggroup(horizontal=TRUE, container=group)
text <- glabel("How many times?", container=g.times)
times <- gspinbutton(from=1, to=5, by=1, value=3, container=g.times)
## The handler function calls the svalue method of the gspinbutton to
## get the number of times
hello <- gbutton("Hello world", container=group,
handler=function(h, ...) {
gmessage(rep("Hello world", svalue(times)))
})
}
{
library(gWidgets2)
options(guiToolkit="RGtk2")
## cairoDevice allows plotting in GTK ggraphics widgets
library(cairoDevice)
win <- gwindow("Hello World, the next generation")
group <- ggroup(horizontal=FALSE, container=win)
## Create an area for a graphics device
g.d <- ggraphics(container=group, width=600, height=600)
## Create the device in it
d <- dev.cur()
# Set the handler to plot
obj <- gbutton("Plot", container = group,
handler=function(h, ...) {
x <- rnorm(50)
plot(density(x, adjust=1, kernel="gaussian"))
rug(x)
})
}
{
library(gWidgets2)
options(guiToolkit="RGtk2")
## cairoDevice allows plotting in GTK ggraphics widgets
library(cairoDevice)
win <- gwindow("Hello World, the next generation")
group <- ggroup(horizontal=FALSE, container=win)
## Create an area for a graphics device
g.d <- ggraphics(container=group, width=600, height=600)
## Create the device in it
d <- dev.cur()
# Set the handler to plot
obj <- gbutton("Plot", container = group,
handler=function(h, ...) {
x <- rnorm(50)
plot(density(x, adjust=1, kernel="gaussian"))
rug(x)
})
updatePlot <- function(h,...) {
x <- rnorm(50)
plot(density(x, adjust = svalue(bandwidthAdjust),
kernel = "gaussian"),main="Density plot")
rug(x)
}
## Add a slider to store a value
bandwidthAdjust <- gslider(from=0,to=2,by=.01, value=1,
handler=updatePlot, container=group)
}
{
library(gWidgets2)
## Select the RGtk2 toolkit
options(guiToolkit="RGtk2")
myapp <- function() {
## This function is essentially the constructor for a class. The
## environment 'this' contains all member variables and functions of
## the class. We do not need to refer to 'this' in the code, but we
## will return it to facilitate debugging.
this <- environment()
win <- gwindow("Hello World")
obj <- gbutton("Hello world", container = win,
handler=function(h, ...) {
gmessage("Goodbye world")
})
return(invisible(list(env=this)))
}
}
detach("package:RGtk2", unload=TRUE)
install.Rtools
install.Rtools()
install.packages("E:/Github/SIMULE/simule-cran/simule_1.2.0.tar.gz", repos = NULL, type = "source")
### load the simule library
library(simule)
demo(simuleDemo)
plot.simule(results, type="sub")
# change this directory accordingly
# read rds data file (refined to 37 words)
nip_37_data <- readRDS("C:/Users/Karen Chen/Desktop/drive-download-20180403T045729Z-001/nip_37_data.rds")
# change this directory accordingly
# read rds data file (refined to 37 words)
nip_37_data <- readRDS("E:\Github\SIMULE\simule-cran\simule\data\nip_37_data.rds")
# change this directory accordingly
# read rds data file (refined to 37 words)
nip_37_data <- readRDS("E:/Github/SIMULE/simule-cran/simule/data/nip_37_data.rds")
install.packages("E:/Github/SIMULE/simule-cran/simule_1.2.0.tar.gz", repos = NULL, type = "source")
### load the simule library
library(simule)
data(nip_23_data)
data(cancer)
data(camcer)
data(cancer)
nip_23_data <- readRDS("E:/Github/SIMULE/simule-cran/simule/data/nip_23_data.rds")
load("C:/Users/Karen Chen/Desktop/Spring 2018/Demo Archive/drive-download-20180403T045729Z-001/third_demo_2018_3_26.RData")
View(Graphs)
View(testdata2)
save(datalist, file = "nip_23_data.rda")
View(Graphs)
load("E:/Github/SIMULE/simule-cran/simule/nip_23_data.rda")
rownames(datalist[[1]])
colnames(datalist[[1]])
nip_37_data <- readRDS("C:/Users/Karen Chen/Downloads/nip_37_data.rds")
View(nip_37_data)
colnames(nip_37_data)
rownames(nip_37_data)
name = rownames(nip_37_data)
a <- t(nip_37_data[1:37,1:2900])  ## From 1987_1 to 2006_160
b <- t(nip_37_data[1:37,2901:5811]) ## From 2006_161 to 2015_403
datalist <- list(a,b)
save(datalist,file="nip_37_data.rda")
install.packages("E:/Github/SIMULE/simule-cran/simule_1.2.0.tar.gz", repos = NULL, type = "source")
library(simule)
demo(nip_37_data)
detach("package:simule", unload=TRUE)
library(simule)
library("simule", lib.loc="~/R/win-library/3.4")
remove.packages("simule", lib="~/R/win-library/3.4")
install.packages("E:/Github/SIMULE/simule-cran/simule_1.2.0.tar.gz", repos = NULL, type = "source")
library(simule)
.rs.restartR()
library(simule)
demo(nip_37_data)
data(nip_37_data)
dataname = colnames(datalist[[1]])
remove.packages("simule", lib="~/R/win-library/3.4")
library(simule)
demo(simuleDemo)
library(simule)
demo(simuleDemo)
library(simule)
demo(simuleDemo)
library(simule)
demo(simuleDemo)
# plot the entire graphs
plot.simule(results, dataname, type="graph")
# plot the shared graph
plot.simule(results, dataname, type="share")
# plot the individual graph 1
plot.simule(results, dataname, type="sub", subID=1)
plot.simule(results, dataname, type="sub", subID=2)
niidatalist <- readRDS("C:/Users/Karen Chen/Desktop/Spring 2018/Demo/niiDemo/finaldatalist.rds")
save(niidatalist,file="niidatalist.rda")
aal116 <- readRDS("C:/Users/Karen Chen/Desktop/Spring 2018/Demo/niiDemo/aal116.rds")
library(brainGraph)
data("aal116")
data(aal116)
data("aal116")
aal116
aal116$name
data("aal116")
dataname = aal116$name
library(simule)
demo(simuleDemo)
library(simule)
demo(simuleDemo)
library(simule)
demo(simuleDemo)
library(simule)
demo(simuleDemo)
library(simule)
demo(simuleDemo)
library(simule)
demo(simuleDemo)
isreturn = TRUE
if (isreturn){print("YES")}
if (！isreturn){print("YES")}
if (!isreturn){print("YES")}
library(simule)
demo(simuleDemo)
library(simule)
demo(simuleDemo)
demo(wsimuleDemo)
getwd
getwd()
setwd("E:/Github/DIFFEE/diffee-cran/diffee")
View(datalist)
library(simule)
Rcmd.exe INSTALL --preclean --no-multiarch --with-keep.source diffee
library(simule)
R CMD build diffee
RCMD build diffee
getwd()
library(simule)
demo(simuleDemo)
# type in sharegraphmade
plot_brainGraph_gui()
setwd("E:\rois_aal")
setwd("E:\rois_aal")
setwd("E:/rois_aal")
MyData <- read.csv(file="Caltech_0051456_rois_aal.1d", header=TRUE, sep=",")
MyData <- read.csv(file="Caltech_0051456_rois_aal.1d", header=false, sep=",")
View(MyData)
MyData <- read.csv(file="Caltech_0051456_rois_aal.1d", header=FALSE, sep=",")
test =  as.matrix(Mydata)
test =  as.matrix(MyData)
View(test)
MyData <- read.csv(file="Caltech_0051456_rois_aal.1d", header=FALSE )
test =  as.matrix(MyData)
View(test)
test[1,1]
test[2,1]
View(test)
View(test)
MyData <- read.talble="Caltech_0051456_rois_aal.1d")
test =  as.matrix(MyData)
MyData <- read.talble("Caltech_0051456_rois_aal.1d")
MyData <- read.table("Caltech_0051456_rois_aal.1d")
test =  as.matrix(MyData)
View(MyData)
load("C:/Users/Karen Chen/Downloads/data_list.RData")
load("C:/Users/Karen Chen/Downloads/data_subjects.RData")
a = rowMeans(test)
a
a = colMeans(test)
a
test[1:10,1:10]
k = sum(test[,1])
data[[1]]
sum(data[[1]][,1])
k = sum(test[,1:100])
k = sum(test[,2])
k = sum(test[,3])
files <- list.files(pattern = "\\.1d$")
files <- list.files(pattern = "\\.1D$")
k = as.numeric(gsub("\\D", "", files[1]))
k = as.numeric(gsub("\\D", "", files))
k = k[-1]
k = as.numeric(gsub("\\D", "", files))
k = substr(k,1,5)
k = as.numeric(k)
k$v1
temp = cbind(k,files)
View(temp)
temp[,1]
temp[order(temp[,1]),]
ans = temp[order(temp[,1]),]
View(ans)
min(k)
temp = substr(files,-6,-1)
temp = substr(files,-6)
temp = substr(files,-6,-1)
install.packages("stringr")
library(stringr)
temp = str_sub(files,-6,-1)
temp = str_sub(files,-19,-13)
temp = str_sub(files,-17,-13)
SUB_ID = str_sub(files,-17,-13)
temp = cbind(SUB_ID,files)
ans = temp[order(temp[,1]),]
View(ans)
help(read.csv)
setwd("C:/Users/Karen Chen/Desktop")
label = read.csv("Phenotypic_V1_0b_preprocessed1")
label = read.csv("Phenotypic_V1_0b_preprocessed1.csv")
label$X
label$DX_GROUP
grouplabel = label$DX_GROUP
groupid = label$SUB_ID
orderedk = order(k)
orderedk = sort(k)
orderedgroupid = sort(groupid)
files
str_sub(files[100],-17,-13)
str_sub(files[1000],-17,-13)
str_sub(files[700],-17,-13)
str_sub(files[750],-17,-13)
str_sub(files[600],-17,-13)
files[800]
str_sub(files[802],-17,-13)
str_sub(files[803],-17,-13)
k
str_sub(files[715],-17,-13)
SUB_ID
temp = cbind(SUB_ID,files)
View(temp)
View(temp)
orderedtemp = sort(temp)
ordered_ID = sort(SUB_ID)
ordered_ID = as.numeric(ordered_ID)
write.csv(ordered_ID, file = "ordered_ID.csv")
write.csv(orderedgroupid, file = "orderedgroupid.csv")
setdiff(ordered_ID,orderedgroupid)
setdiff(orderedgroupid,ordered_ID)
View(temp)
groupid = label$SUB_ID
setdiff(SUB_ID,groupid)
setdiff(groupid,SUB_ID)
library(simule)
demo(simuleDemo)
library(simule)
demo(simuleDemo)
library(simule)
demo(simuleDemo)
library(simule)
demo(simuleDemo)
